#include "block_norm_v1_00_a.h"
#include "VortexImageDescriptor.h"
#include "VortexMessage.h"
#include <cmath>
#include <string>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <sstream>

block_norm_v1_00_a::block_norm_v1_00_a(string Name, uint8_t BusID, uint8_t SwitchID, uint8_t PortID, IVortexNIFSAP* NIFSAP)
{
  m_Name = Name;

  m_IsConfigured = false;

  m_SlaveBaseAddress[0] = 0x0000000000000000;   // sap-controller
  m_SlaveBaseAddress[1] = 0x0000000400000000;   // sap-datapath
  m_SlaveBaseAddress[2] = 0x0000000800000000;   // sap-output
  m_SlaveBaseAddress[3] = 0x0000000C00000000;

  //Datapath Address
  m_DatapathBaseAddress = m_SlaveBaseAddress[1];
  //Pixel Distribution Address

  /////////// Pipeline Base Address //////////////////////////////////////////////
  m_PipelineBaseAddress = m_DatapathBaseAddress + 0x1000000;
  /////////// Pipeline Base Address //////////////////////////////////////////////

  m_ImageConfig = new block_norm_v1_00_a_image_configuration();
  m_ModeConfig = new block_norm_v1_00_a_mode_descriptor();
  m_MemConfig = new block_norm_v1_00_a_mem_descriptor();
  m_OutAddrConfig = new block_norm_v1_00_a_out_addr_descriptor();

  SetNetworkInterface(NIFSAP);
  SetSAPAddress(BusID, SwitchID, PortID);
}

block_norm_v1_00_a::~block_norm_v1_00_a(void)
{
  delete(m_SAPAddress);

  for(std::vector<block_norm_v1_00_a_notification_config* >::iterator it = m_NotificationConfig.begin(); 
      it != m_NotificationConfig.end(); 
      ++it){
    delete (*it);
  }
  delete(m_ImageConfig);
  delete(m_ModeConfig);
  delete(m_MemConfig);
  delete(m_OutAddrConfig);
}
 
void block_norm_v1_00_a::Reset()
{
  GetNetworkInterface()->ResetSAP(m_SAPAddress);
  m_IsConfigured = false;
}

string block_norm_v1_00_a::GetName()
{
  return m_Name;
}

void block_norm_v1_00_a::SetNetworkInterface(IVortexNIFSAP* value)
{
  m_NetworkInterface = value;
}

IVortexNIFSAP* block_norm_v1_00_a::GetNetworkInterface()
{
  return m_NetworkInterface;
}

void block_norm_v1_00_a::SetSAPAddress(uint8_t BusID, uint8_t SwitchID, uint8_t PortID)
{
  m_SAPAddress = new VortexDeviceAddress(BusID,SwitchID,PortID);
}

VortexDeviceAddress* block_norm_v1_00_a::GetSAPAddress()
{
  return m_SAPAddress;
}

 
block_norm_v1_00_a_image_configuration* block_norm_v1_00_a::GetImageConfiguraiton(){
  return m_ImageConfig;
}
block_norm_v1_00_a_mode_descriptor* block_norm_v1_00_a::GetModeDescriptor(){
  return m_ModeConfig;
}
block_norm_v1_00_a_mem_descriptor* block_norm_v1_00_a::GetMemDescriptor(){
  return m_MemConfig;
}
block_norm_v1_00_a_out_addr_descriptor* block_norm_v1_00_a::GetOutAddrDescriptor(){
  return m_OutAddrConfig;
}
 
void block_norm_v1_00_a::AcceleratorAddNotificationTarget(uint8_t BusID, uint8_t SwitchID, uint8_t PortID)
{
  m_NotificationConfig.push_back(new block_norm_v1_00_a_notification_config(BusID,SwitchID,PortID));
}

void block_norm_v1_00_a::AcceleratorSetImageConfiguration(uint16_t ImageWidth, 
							  uint16_t ImageHeight, 
							  IMAGE_DESCRIPTOR_FORMAT_COLOR FormatColor, 
							  IMAGE_DESCRIPTOR_FORMAT_DEPTH FormatDepth, 
							  IMAGE_DESCRIPTOR_TYPE FormatType){
  //  GetImageConfiguraiton()->SetIndex(m_SlaveBaseAddress[0]);
  GetImageConfiguraiton()->SetWidth(ImageWidth);
  GetImageConfiguraiton()->SetHeight(ImageHeight);	

  uint8_t skip_svm_load = 0; // make this argument
  GetImageConfiguraiton()->SetFormatColor(FormatColor);
  GetImageConfiguraiton()->SetFormatDepth(FormatDepth);
  GetImageConfiguraiton()->SetType(FormatType);

}

void block_norm_v1_00_a::setDescriptors(uint16_t ImageWidth, 
							  uint16_t ImageHeight, 
							  IMAGE_DESCRIPTOR_FORMAT_COLOR FormatColor, 
							  IMAGE_DESCRIPTOR_FORMAT_DEPTH FormatDepth, 
							  IMAGE_DESCRIPTOR_TYPE FormatType,
							  
							  // uint16_t hog_ld_flow_id, // this is not required for C++ version
							  //uint8_t hog_ld_mem_id, // now this is in ImageHandle
							  //uint64_t _hog_ld_mem_address,// now this is in ImageHandle
							  // uint8_t block_norm_device_id,
							  uint8_t nmlz_out_sel, // 0(default)=outputNmlzdBin, 1=outputDotProduct
							  uint8_t feature_pedro_sel, // 0=Dalal, 1=FeaturePedro,
							  uint8_t CellPixWidth,
							  uint8_t CellPixHeight,
							  uint8_t RoiPixWidth,
							  uint8_t RoiPixHeight,
							  uint8_t BinNum,
							  uint16_t ScaleAdj,
							  uint8_t ScaleCst,
							  float ProjShift,
							  float TextScale,
							  uint8_t NormMax,
							  uint8_t NormAdjust,
							  // uint16_t svm_ld_flow_id, // this is not required 
							  uint64_t SvmAddr,
							  uint16_t SvmMemID)
{
  AcceleratorSetImageConfiguration(ImageWidth, ImageHeight,
				   FormatColor, FormatDepth, FormatType);


  GetModeDescriptor()->SetCellPixWidth(CellPixWidth);
  GetModeDescriptor()->SetCellPixHeight(CellPixHeight);
  uint8_t skip_svm_load = 0; // make this argument

  // ModeConfig.Mode -------------------------------
  uint8_t mode = 0;
  if(nmlz_out_sel > 0){
    mode |= 0x1; // output normalization result
  } else {
    mode |= 0x2; // output dot product
  }
  if(skip_svm_load > 0) {
    mode |= 0x4; // load svm
  }
  if(feature_pedro_sel > 0){
    mode |= ((0x4|0x2|0x1)<<4);
  } 
  GetModeDescriptor()->SetMode(mode); 
  // ModeConfig.FlipEn -------------------------------
  uint8_t FlipEn = 0;
  if(BinNum>9 && feature_pedro_sel == 0){
    BinNum=BinNum/2;
    FlipEn = 1;
  } else {
    //BinNum=BinNum;
    FlipEn = 0;
  }
  GetModeDescriptor()->SetFlipEn(FlipEn);
  // ----------------------------------------
  GetModeDescriptor()->SetBinNum(BinNum);

  GetModeDescriptor()->SetScaleAdj(ScaleAdj);
  GetModeDescriptor()->SetScaleCst(ScaleCst);
  // ProjShift --------------------------
  GetModeDescriptor()->SetProjShift((ProjShift == 0.5)? 1 : (ProjShift==0.25)? 2 : 0);

  // 
  int text_scale_decode = 0;
  {
    float tmp = TextScale;
    if (tmp - 0.25 >= 0){   // text_scale =     1  * 0.25 + {0or1} * 0.125 + {0or1} * 0.0625 + {0or1)*0.03125
      text_scale_decode |= 0x8;
      tmp -= 0.25f;
    }
    if (tmp - 0.125 >= 0){  // text_scale = {0or1} * 0.25 +     1 * 0.125 + {0or1} * 0.0625 + {0or1}*0.03125
      text_scale_decode |= 0x4;
      tmp -= 0.125f;
    }
    if (tmp - 0.0625 >= 0){ // text_scale = {0or1} * 0.25 + {0or1} * 0.125 +    1 * 0.0625 + {0or1}*0.03125
      text_scale_decode |= 0x2;
      tmp -= 0.0625f;
    }
    if (tmp - 0.03125 >= 0){ // text_scale = {0or1} * 0.25 + {0or1} * 0.125 + {0or1} * 0.0625 +   1}*0.03125
      text_scale_decode |= 0x1;
      //tmp -= 0.03125f;
    }
  }
  GetModeDescriptor()->SetTextScale(text_scale_decode);
  
  GetModeDescriptor()->SetNormMax(NormMax);
  GetModeDescriptor()->SetNormAdjust((NormAdjust<=1? 1 : NormAdjust==8? 2 : NormAdjust==32? 4 :NormAdjust==128? 8 : 1));

  GetModeDescriptor()->SetRoiWidthInCell(RoiPixWidth/CellPixWidth);
  GetModeDescriptor()->SetRoiHeightInCell(RoiPixHeight/CellPixHeight);
  
  GetMemDescriptor()->SetSvmAddr(SvmAddr);
  GetMemDescriptor()->SetSvmMemID(SvmMemID);
}

void block_norm_v1_00_a::AcceleratorAllocateScratchMemory(uint64_t ScratchSize)
{
  m_ScratchMemory = GetNetworkInterface()->AllocateMemory(ScratchSize);
  VortexDeviceAddress* MemoryDevice = m_ScratchMemory->GetMemoryDeviceID();

  //  GetImageConfiguraiton()->SetResultDeviceID(MemoryDevice->GetBusID(),MemoryDevice->GetSwitchID(),MemoryDevice->GetPortID());
  //  GetImageConfiguraiton()->SetResultAddress((uint64_t)m_ScratchMemory->GetMemoryOffset());

  // 
  GetOutAddrDescriptor()->SetNormAddr((uint64_t)m_ScratchMemory->GetMemoryOffset());
  GetOutAddrDescriptor()->SetNormMemID(GetImageConfiguraiton()->GetResultDeviceID()->GetDeviceID());
  GetOutAddrDescriptor()->SetDotpAddr((uint64_t)m_ScratchMemory->GetMemoryOffset());
  GetOutAddrDescriptor()->SetDotpMemID(GetImageConfiguraiton()->GetResultDeviceID()->GetDeviceID());
}

void block_norm_v1_00_a::AcceleratorAllocateFlowID()
{
  uint16_t BaseFlowID = GetNetworkInterface()->AllocateFlowID(3); // +0:SVM +1:HistLoad +2:Output

  if (BaseFlowID != 0){
    GetMemDescriptor()->SetSvmFlowID(BaseFlowID);
    GetMemDescriptor()->SetHogFlowID(BaseFlowID+1);
    GetMemDescriptor()->SetDotpFlowID(BaseFlowID+2);
    GetImageConfiguraiton()->SetBaseFlowID(BaseFlowID);
  }
}

bool block_norm_v1_00_a::Configure()
{
  ///////////// Retrieve Variables ////////////////////////////////////
  int ImageWidth  = GetImageConfiguraiton()->GetWidth();
  int ImageHeight = GetImageConfiguraiton()->GetHeight();
  int ImageSize   = GetImageConfiguraiton()->GetImageSizeBytes();
  //  uint64_t ControllerBasAddress = 

  AcceleratorAllocateFlowID();  // This is the Pixel Fetch Flow ID. Histogram Store Flow ID will be +1 of this 
  AcceleratorAllocateScratchMemory(this->GetOutputSize()); // This is the allocation for results 

  ///////////// Retrieve Variables ////////////////////////////////////
  /*  Not Used... is this OK??
  //->///////////// Configure Controller ////////////////////////////////////
  //|
  //|	///////////// Configure DeviceID ////////////////////////////////////
  ConfigureDeviceID(m_SAPAddress, DEVICE + ControllerBasAddress);
  //|	///////////// Configure DeviceID ////////////////////////////////////
  //|
  //|	//// Configure Opcodes ////
  ConfigureList(m_SAPAddress, OPCODE + ControllerBasAddress, GetOpcodeConfiguration());
  //|	//// Configure Opcodes ////
  //|	//
  //|	//// Configure Notifications ////
  ConfigureList(m_SAPAddress, NOTIFICATION + ControllerBasAddress, GetNotificationConfiguration());
  //|	//// Configure Notifications ////
  //|	//
  //|	//// Configure Image Descriptors ////
  ConfigureList(m_SAPAddress, IMAGE + ControllerBasAddress, GetImageConfiguraiton());
  //|	//// Configure Image Descriptors ////
  //|	//
  //|->///////////// Configure Controller ////////////////////////////////////
  */
  /* Not Used 
  //|->///////////// Configure Datapath //////////////////////////////////////
  VortexConfigurationGroup* DatapathConfigs = new VortexConfigurationGroup(m_SAPAddress);
  //|
  DatapathConfigs->Insert(GetConvolutionKernelConfiguration()->GetConfiguration(), VortexEntityType::SAP);
  DatapathConfigs->Insert(GetConvolutionImageConfiguration()->GetConfiguration(),VortexEntityType::SAP);
  DatapathConfigs->Insert(GetHistogramMinMaxConfiguration()->GetConfiguration(), VortexEntityType::SAP);
  DatapathConfigs->Insert(GetHistogramPageTableConfiguration()->GetConfiguration(), VortexEntityType::SAP);
  DatapathConfigs->Insert(GetHistogramImageConfiguration()->GetConfiguration(), VortexEntityType::SAP);
  //|
  //|	//// Datapath Functional Unit Configurations ////
  //|	
  //|	
  GetNetworkInterface()->Configure(DatapathConfigs);
  //|->	///////////// Configure Datapath ////////////////////////////////////

  delete(DatapathConfigs);
  */


  return (m_IsConfigured = true);
}

void block_norm_v1_00_a::ConfigureDeviceID(VortexDeviceAddress* SAPDevice, uint64_t SAPAddress)
{
  uint8_t* DeviceIDBytes = SAPDevice->GetBytes();
  VortexConfigurationGroup* vcgDeviceID = new VortexConfigurationGroup(SAPDevice, new VortexConfigurationPacket(DeviceIDBytes, 2, SAPAddress), VortexEntityType::SAP);

  //Configure
  GetNetworkInterface()->Configure(vcgDeviceID);
  delete(vcgDeviceID);
}

/*
// Just one opcode configuration
void block_norm_v1_00_a::ConfigureList(VortexDeviceAddress* SAPDevice, uint64_t SAPAddress, block_norm_v1_00_a_opcode_config* Config)
{
  IVortexConfiguration** ivc = new IVortexConfiguration*[1];
  ivc[0] = Config;

  ConfigureList(SAPDevice, SAPAddress, ivc, 1);

  delete(ivc);
}

// Vector of opcode configurations
void block_norm_v1_00_a::ConfigureList(VortexDeviceAddress* SAPDevice, uint64_t SAPAddress, vector<block_norm_v1_00_a_opcode_config*> Configs)
{
  IVortexConfiguration** ivc = new IVortexConfiguration*[Configs.size()];
  for (int i = 0; i<Configs.size(); i++)
    ivc[i] = Configs[i];

  ConfigureList(SAPDevice, SAPAddress, ivc, Configs.size());

  delete[](ivc);
}

void block_norm_v1_00_a::ConfigureList(VortexDeviceAddress* SAPDevice, uint64_t SAPAddress, block_norm_v1_00_a_controller_config* Config)
{
  IVortexConfiguration** ivc = new IVortexConfiguration*[1];
  ivc[0] = Config;

  ConfigureList(SAPDevice, SAPAddress, ivc, 1);

  delete(ivc);
}

void block_norm_v1_00_a::ConfigureList(VortexDeviceAddress* SAPDevice, uint64_t SAPAddress, vector<block_norm_v1_00_a_controller_config*> Configs)
{
  IVortexConfiguration** ivc = new IVortexConfiguration*[Configs.size()];
  for (int i=0; i<Configs.size(); i++)
    ivc[i] = Configs[i];

  ConfigureList(SAPDevice, SAPAddress, ivc, Configs.size());

  delete[](ivc);
}

void block_norm_v1_00_a::ConfigureList(VortexDeviceAddress* SAPDevice, uint64_t SAPAddress, vector<block_norm_v1_00_a_notification_config*> Configs)
{
  IVortexConfiguration** ivc = new IVortexConfiguration*[Configs.size()];
  for (int i=0; i<Configs.size(); i++)
    ivc[i] = Configs[i];

  ConfigureList(SAPDevice, SAPAddress, ivc, Configs.size());

  delete[](ivc);
}

void block_norm_v1_00_a::ConfigureList(VortexDeviceAddress* SAPDevice, uint64_t SAPAddress, IVortexConfiguration** Configurations, int NumConfigurations)
{
  VortexConfigurationGroup** ConfigurationGroup = new VortexConfigurationGroup*[2];
  ConfigurationGroup[0] = new VortexConfigurationGroup(SAPDevice);
  ConfigurationGroup[1] = new VortexConfigurationGroup(SAPDevice);
  ConfigurationGroup[0]->Insert(new VortexConfigurationPacket(SAPAddress),VortexEntityType::SAP);
  for (int i=0; i<NumConfigurations; i++)
    ConfigurationGroup[1]->Insert(Configurations[i],SAPAddress + 0x10,VortexEntityType::SAP);

  GetNetworkInterface()->Configure(ConfigurationGroup, 2);

  delete(ConfigurationGroup[0]);
  delete(ConfigurationGroup[1]);
  delete[](ConfigurationGroup);
}
*/
uint8_t* block_norm_v1_00_a::Process(VortexMemoryAllocation* ImageHandle, 
				     uint16_t ImageWidth, 
				     uint16_t ImageHeight,
				     // uint16_t hog_ld_flow_id, // this is not required for C++ version
				     // uint8_t hog_ld_mem_id, // now this is in ImageHandle
				     //uint64_t _hog_ld_mem_address,// now this is in ImageHandle
				     // uint8_t block_norm_device_id,
				     uint8_t nmlz_out_sel, // 0(default)=outputNmlzdBin, 1=outputDotProduct
				     uint8_t feature_pedro_sel, // 0=Dalal, 1=FeaturePedro,
				     uint8_t CellPixWidth,
				     uint8_t CellPixHeight,
				     uint8_t RoiPixWidth,
				     uint8_t RoiPixHeight,
				     uint8_t BinNum,
				     uint16_t ScaleAdj,
				     uint8_t ScaleCst,
				     float ProjShift,
				     float TextScale,
				     uint8_t NormMax,
				     uint8_t NormAdjust,
				     // uint16_t svm_ld_flow_id, // this is not required 
				     uint64_t SvmAddr,
				     uint16_t SvmMemID)
{
  int ConfiguredImageWidth = GetImageConfiguraiton()->GetWidth();
  int ConfiguredImageHeight = GetImageConfiguraiton()->GetHeight();
  int ConfiguredImageSize = GetImageConfiguraiton()->GetImageSizeBytes();
	
  if (!m_IsConfigured || (ConfiguredImageWidth != ImageWidth) || (ConfiguredImageHeight != ImageHeight) )
    {
      //Reset();

      AcceleratorSetImageConfiguration(
				       ImageWidth,
				       ImageHeight,
				       IMAGE_DESCRIPTOR_FORMAT_COLOR::NONE,
				       IMAGE_DESCRIPTOR_FORMAT_DEPTH::UINT32,
				       IMAGE_DESCRIPTOR_TYPE::RAW
				       );

      if (!Configure())
	return NULL;

    }
	
  setDescriptors(ImageWidth, 
		 ImageHeight,
		 nmlz_out_sel, // 0(default)=outputNmlzdBin, 1=outputDotProduct
		 feature_pedro_sel, // 0=Dalal, 1=FeaturePedro,
		 CellPixWidth,
		 CellPixHeight,
		 RoiPixWidth,
		 RoiPixHeight,
		 BinNum,
		 ScaleAdj,
		 ScaleCst,
		 ProjShift,
		 TextScale,
		 NormMax,
		 NormAdjust,
		 SvmAddr,
		 SvmMemID);
  
  VortexImageDescriptor* ImageDescriptor = new VortexImageDescriptor();
  ImageDescriptor->SetIdentifier(0xEEFF); // this is now 10 bit not 16 bit .. need to figure out what impact this has 
  ImageDescriptor->SetWidth(ConfiguredImageWidth);
  ImageDescriptor->SetHeight(ConfiguredImageHeight);
  ImageDescriptor->SetType(IMAGE_DESCRIPTOR_TYPE::RAW);
  ImageDescriptor->SetFormatColor(IMAGE_DESCRIPTOR_FORMAT_COLOR::NONE);
  ImageDescriptor->SetFormatDepth(IMAGE_DESCRIPTOR_FORMAT_DEPTH::UINT32);
  ImageDescriptor->SetImageHandle(ImageHandle); // Give Image address & id
  
  VortexMessage* ProcessMessage = new VortexMessage(
						    VortexMessageType::EXECUTE_REQUEST,
						    NULL,
						    GetSAPAddress(),
						    true);

  ProcessMessage->AddBytes(ImageDescriptor->GetBytes(),16);
  ProcessMessage->AddBytes(m_ModeConfig->GetBytes(), 16);
  ProcessMessage->AddBytes(m_MemConfig->GetBytes(), 16);
  ProcessMessage->AddBytes(m_OutAddrConfig->GetBytes(), 16);
  GetNetworkInterface()->SendMessage(ProcessMessage);

  delete(ProcessMessage);
  delete(ImageDescriptor);
  
  VortexMessage* ProcessMessageResponse = GetNetworkInterface()->WaitMessage();
  if ((ProcessMessageResponse == NULL) || ProcessMessageResponse->GetType() != VortexMessageType::EXECUTE_COMPLETE)
    {
      delete(ProcessMessageResponse);
      return NULL;
    }

  delete(ProcessMessageResponse);

  // Filling Zero to invalid area
  GetNetworkInterface()-
  if(GetOutAddrDescriptor()->IdNormalizeOut()){
    return (uint8_t*)(GetOutAddrDescriptor()->GetNormAddr());
  } else {
    return (uint8_t*)(GetOutAddrDescriptor()->GetDotpAddr());
  }
}



uint64_t block_norm_v1_00_a::GetOutputSize(void)
{
  uint16_t imageWidth = GetImageConfiguraiton()->GetWidth();
  uint16_t imageHeight = GetImageConfiguraiton()->GetHeight();
  uint8_t cellPixWidth = GetModeDescriptor()->GetCellPixWidth();
  uint8_t cellPixHeight = GetModeDescriptor()->GetCellPixHeight();
  uint8_t binNum = GetModeDescriptor()->GetBinNum();
  uint8_t nmlzOut = GetModeDescriptor()->IsNormalizeOut();
  uint8_t dotpOut = GetModeDescriptor()->IsDotpOut();
  uint16_t imageCellWidth = imageWidth/cellPixWidth;
  uint16_t imageCellHeight = imageHeight/cellPixHeight;
  if(dotpOut){
    return 4/*byte per roi*/ * imageCellWidth * imageCellHeight;
  } 
  else if(nmlzOut){
    return 4/*block per cell*/ * binNum /*bin per cell*/ * imageCellWidth * imageCellHeight;
  }
  else {
    assert(false);
  }
}
